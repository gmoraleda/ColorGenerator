import Foundation

struct PluginInvocation: Codable {
    let catalogPath: String
    let outputPath: String

    func encodedString() throws -> String {
        let data = try JSONEncoder().encode(self)
        return String(decoding: data, as: UTF8.self)
    }
}

let invocation = try JSONDecoder().decode(PluginInvocation.self, from: Data(ProcessInfo.processInfo.arguments[1].utf8))
print("ColorGenerator", "Catalog path is \(invocation.catalogPath)")
print("ColorGenerator", "Output path is \(invocation.outputPath)")

let content: String = try fileContent(for: invocation.catalogPath)

try content.write(toFile: invocation.outputPath,
                  atomically: true,
                  encoding: .utf8)

func fileContent(for catalogPath: String) -> String {
    var content = """
    // Generated by ColorGenerator
    // DO NOT EDIT
    // swiftlint:disable all

    import SwiftUI

    public extension Color {

    """

    let catalogURL = URL(fileURLWithPath: catalogPath)
    let catalogName = catalogURL.deletingPathExtension().lastPathComponent

    print("###", "Processing catalog at path \(catalogPath)")
    print("###", "Catalog name is \(catalogName)")

    // Find all entries of type colorset in the subdirectories
    let enumerator = FileManager.default.enumerator(atPath: catalogPath)
    var colorSets: [String] = []
    while let element = enumerator?.nextObject() as? String {
        if element.hasSuffix(".colorset") {
            let colorSet = element.replacingOccurrences(of: ".colorset", with: "")
            let colorSetComponents = colorSet.components(separatedBy: "/")
            let colorSetName = colorSetComponents.last!

            content += """
                static var \(colorSetName): Color {
                    Color(#function, bundle: .module)
                }

            """
        }
    }

    content += """

    }
    // swiftlint:enable all
    """

    return content
}
